apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "loginsystem.dropbox.com.loginsystem"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java.srcDirs = [
                    'src/main/java',
                    '../../../loginsystem.djinni',
                    '../../../uni_login.djinni',
                    '../../../handwritten-src/cpp',
                    '../../../generated-src/java',
                    '../../../grpc'
            ]
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0-beta01'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'

    // You need to build grpc-java to obtain these libraries below.
    implementation 'io.grpc:grpc-okhttp:1.14.0'
    implementation 'io.grpc:grpc-protobuf-lite:1.14.0'
    implementation 'io.grpc:grpc-stub:1.14.0'
    implementation 'javax.annotation:javax.annotation-api:1.2'
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.5.1-1' }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.14.0' // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc { // Options added to --grpc_out
                    option 'lite' }
            }
        }
    }
}

task ndkBuild(type: Exec) {
    def ndkDir = project.android.ndkDirectory
    def ndkBuildExecutable

    if (ndkDir) {
        ndkBuildExecutable = new File(ndkDir, 'ndk-build')
        def MainDirectory = System.getProperty("user.dir") + '/app'

        environment("NDK_PROJECT_PATH", MainDirectory)
        environment("GYP_CONFIGURATION", "Release")

        commandLine ndkBuildExecutable
    }

    doFirst {
        if (!ndkDir) {
            def gradle_project_root = project.rootProject.rootDir
            throw new GradleException("NDK is not configured. Make sure there is a local.properties " +
                    "file with an ndk.dir entry in the directory ${gradle_project_root}.")
        }

        if (!ndkBuildExecutable.file) {
            throw new GradleException("Could not find ndk-build. The configured NDK directory ${ndkDir} may not be correct.")
        }
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}
